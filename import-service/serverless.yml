# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
plugins:
  - serverless-webpack # serverless webpack plugin

package:
  individually: true # to package functions individually. You can toggle this and check the difference webpack generates

custom:
  webpack: # serverless-webpack plugin options
    webpackConfig: webpack.config.js # Name of webpack configuration file
    includeModules: true # Node modules configuration for packaging
    packager: 'npm' # Packager that will be used to package your external modules

service: import-service
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  profile: utrennik
  stage: dev
  region: eu-west-1

  iamRoleStatements:
    - Effect: Allow
      Action: s3:*
      Resource:
        - arn:aws:s3:::aws-pic-app-products-upload

    - Effect: Allow
      Action: sqs:*
      Resource:
        Fn::GetAtt: [SQSQueue, Arn]

    - Effect: Allow
      Action: sns:*
      Resource:
        - Ref: SNSTopic

  environment:
    SQS_URL:
      Ref: SQSQueue
    SNS_TOPIC_ARN:
      Ref: SNSTopic    

functions:
  importProductsFile:
    handler: src/handlers/importProductsFile.importProductsFile
    integration: http-proxy
    events:
      - http:
          path: 'import/'
          method: get
          cors: true
          authorizer:
            name: tokenAuthorizer
            arn: arn:aws:lambda:eu-west-1:033340863456:function:authorization-service-dev-basicAuthorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  importFileParser:
    handler: src/handlers/importFileParser.importFileParser
    events:
      - s3:
          bucket: aws-pic-app-products-upload
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true

  catalogBatchProcess:
    handler: src/handlers/catalogBatchProducts.catalogBatchProducts
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt: [SQSQueue, Arn]

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: aws-pic-app-topic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: utrennik.aws@gmail.com
        Protocol: email
        TopicArn:
          Ref: SNSTopic
    SNSSubscriptionFiltered:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: utrennik.aws.filter@gmail.com
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          title:
            - Lion

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId: 6db2h6g43k
